# pytest.ini
# Pytest configuration file

[pytest]
# Test discovery
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, may use external services)
    slow: Slow-running tests
    requires_api: Tests requiring real API keys

# Output options
addopts =
    --verbose
    --strict-markers
    --tb=short
    --cov=src/research_assistant
    --cov-report=html
    --cov-report=term-missing
    --cov-fail-under=80
    -ra

# Coverage options
[coverage:run]
source = src/research_assistant
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */site-packages/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False

exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract

---
# pyproject.toml additions for pytest

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "requires_api: Requires external API",
]

addopts = [
    "--verbose",
    "--cov=src/research_assistant",
    "--cov-report=html",
    "--cov-report=term-missing",
]

[tool.coverage.run]
source = ["src/research_assistant"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
fail_under = 80

---
# Makefile test targets

.PHONY: test test-unit test-integration test-fast test-all test-cov test-watch

# Run all tests
test:
	@echo "Running all tests..."
	pytest tests/

# Run only unit tests
test-unit:
	@echo "Running unit tests..."
	pytest tests/unit/ -m "unit or not integration"

# Run only integration tests
test-integration:
	@echo "Running integration tests..."
	pytest tests/integration/ -m integration

# Run fast tests (exclude slow)
test-fast:
	@echo "Running fast tests..."
	pytest tests/ -m "not slow"

# Run all tests including slow ones
test-all:
	@echo "Running all tests including slow..."
	pytest tests/ -m ""

# Run tests with coverage report
test-cov:
	@echo "Running tests with coverage..."
	pytest tests/ --cov=src/research_assistant --cov-report=html --cov-report=term
	@echo "Coverage report generated in htmlcov/index.html"

# Watch mode for development
test-watch:
	@echo "Running tests in watch mode..."
	pytest-watch tests/

# Run specific test file
test-file:
	@echo "Usage: make test-file FILE=tests/unit/test_schemas.py"
	pytest $(FILE) -v

# Run tests matching pattern
test-match:
	@echo "Usage: make test-match PATTERN=test_analyst"
	pytest tests/ -k $(PATTERN) -v

# Run tests with specific marker
test-marker:
	@echo "Usage: make test-marker MARKER=unit"
	pytest tests/ -m $(MARKER)

# Generate coverage badge
test-badge:
	@echo "Generating coverage badge..."
	coverage-badge -o coverage.svg

# Clean test artifacts
test-clean:
	@echo "Cleaning test artifacts..."
	rm -rf .pytest_cache
	rm -rf htmlcov
	rm -rf .coverage
	rm -f coverage.svg
	find . -type d -name __pycache__ -exec rm -rf {} +

---
# .github/workflows/test.yml
# GitHub Actions workflow for running tests

name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src/research_assistant --cov-report=xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v -m "not requires_api"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy
    
    - name: Lint with ruff
      run: ruff check src/
    
    - name: Type check with mypy
      run: mypy src/research_assistant

---
# tox.ini (optional - for testing multiple Python versions)

[tox]
envlist = py311,py312,lint,type
skip_missing_interpreters = true

[testenv]
deps =
    pytest
    pytest-cov
    pytest-mock
extras = dev
commands =
    pytest tests/ -v --cov=src/research_assistant

[testenv:lint]
deps =
    ruff
commands =
    ruff check src/

[testenv:type]
deps =
    mypy
    types-requests
commands =
    mypy src/research_assistant

[testenv:coverage]
deps =
    pytest
    pytest-cov
commands =
    pytest tests/ --cov=src/research_assistant --cov-report=html --cov-report=term
    
---
# .coveragerc (alternative coverage config)

[run]
source = src/research_assistant
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */site-packages/*

[report]
precision = 2
show_missing = True
skip_covered = False

exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abstract
