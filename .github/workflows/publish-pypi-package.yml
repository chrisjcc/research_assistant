# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build-distributions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build release distributions
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  # ----------------------------------------------------------------
  # ✅ Regular PyPI publish for non-pre-releases
  # ----------------------------------------------------------------
  pypi-publish:
    needs: [build-distributions]
    runs-on: ubuntu-latest
    if: ${{ !github.event.release.prerelease }}
    permissions:
      id-token: write  # required for trusted publishing
    environment:
      name: pypi
      url: https://pypi.org/p/ai-research-assistant
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      # 🧩 Check if version already exists on PyPI
      - name: Check if version exists on PyPI
        id: check_version
        run: |
          VERSION=$(python -c "import os, re; files=os.listdir('dist'); print(re.search(r'([0-9]+\.[0-9]+\.[0-9]+)', files[0]).group(1))")
          echo "Version detected: $VERSION"
          if curl -s -f https://pypi.org/pypi/ai-research-assistant/$VERSION/json > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      # 🚀 Only publish if version doesn't exist
      - name: Publish release distributions to PyPI
        if: steps.check_version.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true  # still useful as a last line of defense

      - name: Skip notice (version already exists)
        if: steps.check_version.outputs.exists == 'true'
        run: echo "Version already exists on PyPI, skipping upload."

  # ----------------------------------------------------------------
  # ✅ TestPyPI publish for pre-releases
  # ----------------------------------------------------------------
  testpypi-publish:
    needs: [build-distributions]
    runs-on: ubuntu-latest
    if: ${{ !github.event.release.prerelease }}    # ← only run on full release
    permissions:
      id-token: write   # REQUIRED for trusted publishing via OIDC
      contents: read
    environment:
      name: testpypi
      url: https://test.pypi.org/p/ai-research-assistant
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      # 🧩 Check if version already exists on TestPyPI
      - name: Check if version exists on TestPyPI
        id: check_version
        run: |
          VERSION=$(python -c "import os, re; files=os.listdir('dist'); print(re.search(r'([0-9]+\.[0-9]+\.[0-9]+)', files[0]).group(1))")
          echo "Version detected: $VERSION"
          if curl -s -f https://test.pypi.org/pypi/ai-research-assistant/$VERSION/json > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish to TestPyPI
        if: steps.check_version.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

      - name: Skip notice (version already exists)
        if: steps.check_version.outputs.exists == 'true'
        run: echo "Version already exists on TestPyPI, skipping upload."

  # ----------------------------------------------------------------
  # ✅ Notification summary
  # ----------------------------------------------------------------
  notify:
    needs: [pypi-publish, testpypi-publish]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "Release '${{ github.event.release.tag_name }}' completed!"
          echo "Pre-release: ${{ github.event.release.prerelease }}"
          echo "PyPI job result: ${{ needs.pypi-publish.result }}"
          echo "TestPyPI job result: ${{ needs.testpypi-publish.result }}"
