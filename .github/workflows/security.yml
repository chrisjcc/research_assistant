name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
    
    - name: Run Safety check
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        safety check --json --output safety-report.json || true
        safety check || true
    
    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit || true
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-dependencies
        path: |
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning

    # Push events: scan the pushed range (before -> after)
    - name: TruffleHog (push)
      if: ${{ github.event_name == 'push' && github.event.before != github.sha }}
      uses: trufflesecurity/trufflehog@main
      with:
        path: .
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --debug --only-verified

    # Edge case: single-commit or same-SHA push — skip cleanly
    - name: TruffleHog (push - nothing to diff)
      if: ${{ github.event_name == 'push' && github.event.before == github.sha }}
      run: |
        echo "TruffleHog: BASE and HEAD are identical on this push; skipping diff scan."

    # PRs: scan between PR base and head
    - name: TruffleHog (pull_request)
      if: ${{ github.event_name == 'pull_request' }}
      uses: trufflesecurity/trufflehog@main
      with:
        path: .
        base: ${{ github.event.pull_request.base.sha }}
        head: ${{ github.event.pull_request.head.sha }}
        extra_args: --debug --only-verified
  
    # Scheduled / manual runs: scan recent history
    - name: TruffleHog (scheduled/manual)
      if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
      shell: bash
      run: |
        git fetch origin "${{ github.event.repository.default_branch }}"
        SINCE=$(git rev-list -n 1 --before="24 hours ago" "origin/${{ github.event.repository.default_branch }}")
        if [ -z "$SINCE" ]; then
          echo "No commit found 24h ago; scanning full history."
          trufflehog git file://$PWD --fail --no-update --only-verified --debug
        else
          trufflehog git file://$PWD --since-commit "$SINCE" --fail --no-update --only-verified --debug
        fi

  code-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep
    
    - name: Run Bandit security linter
      run: |
        bandit -r src scripts -f json -o bandit-report.json -ll -ii || true
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output semgrep-report.json src scripts || true
        semgrep --config=auto src scripts
    
    - name: Upload Code Scan Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-code
        path: |
          bandit-report.json
          semgrep-report.json
        retention-days: 30

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  license-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -e ".[dev]"
    
    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=license-report.json
        pip-licenses --format=markdown --output-file=license-report.md
    
    - name: Check for incompatible licenses
      run: |
        # Add your license policy check here
        echo "Checking for GPL and other copyleft licenses..."
        pip-licenses | grep -i "gpl\|agpl\|lgpl" && exit 1 || echo "No problematic licenses found"
    
    - name: Upload License Report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          license-report.json
          license-report.md
        retention-days: 30

  container-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        if [ -f Dockerfile ]; then
          docker build -t research-assistant:${{ github.sha }} .
        else
          echo "No Dockerfile found, skipping container scan"
          exit 0
        fi
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      if: hashFiles('Dockerfile') != ''
      with:
        image-ref: 'research-assistant:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: hashFiles('Dockerfile') != ''
      with:
        sarif_file: 'trivy-results.sarif'

  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, code-scan, license-scan]
    if: always()
    steps:
    - name: Check security results
      run: |
        echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "Secret Scan: ${{ needs.secret-scan.result }}"
        echo "Code Scan: ${{ needs.code-scan.result }}"
        echo "License Scan: ${{ needs.license-scan.result }}"
        
        if [ "${{ needs.dependency-scan.result }}" == "failure" ] || \
           [ "${{ needs.secret-scan.result }}" == "failure" ]; then
          echo "❌ Critical security issues found"
          exit 1
        elif [ "${{ needs.code-scan.result }}" == "failure" ] || \
             [ "${{ needs.license-scan.result }}" == "failure" ]; then
          echo "⚠️ Security warnings found"
          exit 0
        else
          echo "✅ All security checks passed"
        fi
