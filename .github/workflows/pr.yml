name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr-validation:
    runs-on: ubuntu-latest
    env:
      TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check PR title format
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"

        PATTERN="^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\\([^)]+\\))?: .+"

        # Check for conventional commit format
        if [[ ! "$PR_TITLE" =~ $PATTERN ]]; then
          echo "❌ PR title doesn't follow conventional commits format"
          echo "Expected: type(scope): description"
          echo "Examples:"
          echo "  - feat(api): add new endpoint"
          echo "  - fix(ui): resolve button alignment"
          echo "  - docs: update README"
          exit 1
        fi

        echo "✅ PR title follows conventional commits format"

    - name: Check PR size
      id: pr_size
      run: |
        # Get changed files
        CHANGED_FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files | length')
        ADDITIONS=$(gh pr view ${{ github.event.pull_request.number }} --json additions --jq '.additions')
        DELETIONS=$(gh pr view ${{ github.event.pull_request.number }} --json deletions --jq '.deletions')
        TOTAL_CHANGES=$((ADDITIONS + DELETIONS))

        echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "changes=$TOTAL_CHANGES" >> $GITHUB_OUTPUT

        # Determine size label
        if [ $TOTAL_CHANGES -lt 100 ]; then
          SIZE="XS"
        elif [ $TOTAL_CHANGES -lt 300 ]; then
          SIZE="S"
        elif [ $TOTAL_CHANGES -lt 1000 ]; then
          SIZE="M"
        elif [ $TOTAL_CHANGES -lt 3000 ]; then
          SIZE="L"
        else
          SIZE="XL"
        fi

        echo "size=$SIZE" >> $GITHUB_OUTPUT

        # Warning for large PRs
        if [ $TOTAL_CHANGES -gt 1000 ]; then
          echo "⚠️ This PR is quite large ($TOTAL_CHANGES lines changed)"
          echo "Consider splitting it into smaller PRs for easier review"
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Add size label
      uses: actions/github-script@v7
      with:
        script: |
          const size = '${{ steps.pr_size.outputs.size }}';
          const labels = ['size/XS', 'size/S', 'size/M', 'size/L', 'size/XL'];

          // Remove existing size labels
          const currentLabels = await github.rest.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });

          for (const label of currentLabels.data) {
            if (labels.includes(label.name)) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: label.name
              });
            }
          }

          // Add new size label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: [`size/${size}`]
          });

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-2.0, GPL-3.0, AGPL-3.0

  code-coverage:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

    - name: Coverage Comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70

  pr-comment:
    runs-on: ubuntu-latest
    needs: [pr-validation, code-coverage]
    if: always() && github.event.pull_request.draft == false
    steps:
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const body = `## 🤖 Automated PR Review

          ### Status Summary
          - ✅ PR Validation: ${{ needs.pr-validation.result }}
          - 📊 Code Coverage: ${{ needs.code-coverage.result }}
          
          ### Next Steps
          1. Ensure all checks pass
          2. Request review from team members
          3. Address any review comments

          ---
          *Automated by GitHub Actions*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: body
          });

  auto-label:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Auto-label based on files changed
      uses: actions/github-script@v7
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          const labels = new Set();

          for (const file of files) {
            if (file.filename.startsWith('src/')) {
              labels.add('code');
            }
            if (file.filename.startsWith('tests/')) {
              labels.add('tests');
            }
            if (file.filename.includes('README') || file.filename.startsWith('docs/')) {
              labels.add('documentation');
            }
            if (file.filename.startsWith('.github/workflows/')) {
              labels.add('ci/cd');
            }
            if (file.filename === 'pyproject.toml') {
              labels.add('dependencies');
            }
          }

          if (labels.size > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: Array.from(labels)
            });
          }
