# This workflow automates the end-to-end release process for the project.
# It runs on tagged pushes (e.g., v1.0.0) or manual dispatch, and performs:
#   1. Validation of tests, dependencies, and version format
#   2. Package build and metadata checks
#   3. Automatic changelog generation from commit history
#   4. Creation (or reuse) of a GitHub Release with attached artifacts
#   5. Conditional Docker image build and push when the Dockerfile changes
#
# The workflow does not publish to PyPI directly. That task is handled by the
# separate 'publish-pypi-package.yml' workflow, which runs automatically
# when a GitHub release is published.
#
# For more information about GitHub Actions workflows, see:
# https://docs.github.com/en/actions/using-workflows/about-workflows
#
# Note: This workflow uses both official and community-maintained actions.
# Community actions are governed by their own terms of service and privacy policies.

name: Release

on:
  push:
    tags:
      - "v*.*.*"  # e.g., v1.0.0, v2.1.3
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Is this a pre-release?"
        required: false
        type: boolean
        default: false

env:
  TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # ----------------------------------------------------------------
  # ✅ Validate tests, version format, and environment setup
  # ----------------------------------------------------------------
  validate:
    runs-on: ubuntu-latest
    environment: pypi
    env:
      TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        run: pytest tests/ -v --cov=src

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          if [[ "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Valid version detected: $VERSION"
          else
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi

  # ----------------------------------------------------------------
  # ✅ Build and check Python package
  # ----------------------------------------------------------------
  build:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools

      - name: Build package
        run: python -m build

      - name: Check package metadata
        run: python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

  # ----------------------------------------------------------------
  # ✅ Create GitHub Release (idempotent)
  # ----------------------------------------------------------------
  create-release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          {
            echo "## What's Changed"
            echo ""
            echo "$CHANGELOG"
            echo ""
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...v${{ steps.get_version.outputs.version }}"
          } > CHANGELOG.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check_release
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: Skip existing release
        if: steps.check_release.outputs.exists == 'true'
        run: echo "Release already exists, skipping creation."

  # ----------------------------------------------------------------
  # ✅ Upload build artifacts to the GitHub Release
  # ----------------------------------------------------------------
  upload-assets:
    needs: [build, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-packages
          path: dist/

      - name: Upload assets to Release
        if: needs.create-release.outputs.upload_url != ''
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*

  # ----------------------------------------------------------------
  # ✅ Docker image build and push
  # ----------------------------------------------------------------
  docker-release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for Dockerfile changes
        id: docker_change
        run: |
          if [[ -n "$(git diff --name-only HEAD^ HEAD | grep Dockerfile || true)" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Docker Buildx
        if: steps.docker_change.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.docker_change.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        if: steps.docker_change.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        if: steps.docker_change.outputs.changed == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/research-assistant
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.create-release.outputs.version }}
            type=raw,value=latest,enable=${{ !github.event.inputs.prerelease }}

      - name: Build and push Docker images
        if: steps.docker_change.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ----------------------------------------------------------------
  # ✅ Final notification summary
  # ----------------------------------------------------------------
  notify:
    needs: [create-release, docker-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summary notification
        run: |
          echo "🎉 Release process completed!"
          echo "Version: v${{ needs.create-release.outputs.version }}"
          echo "Docker job: ${{ needs.docker-release.result }}"
          echo "Pre-release: ${{ github.event.inputs.prerelease }}"
          echo "✅ Artifacts uploaded and release finalized."
