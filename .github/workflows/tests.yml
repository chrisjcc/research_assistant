name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml', 'pdm.lock', 'poetry.lock', 'poetry.toml', 'setup.cfg') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src scripts tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src scripts tests --count --max-complexity=15 --max-line-length=100 --statistics --exit-zero
    
    - name: Check formatting with black
      run: |
        black --check src scripts tests --line-length=100
    
    - name: Check imports with isort
      run: |
        isort --check-only src scripts tests --profile black --line-length=100
    
    - name: Lint with ruff
      run: |
        ruff check src scripts tests --select=E,F,I,N,W,UP,B,A,C4,DTZ,T20,RET,SIM,ARG,PTH,PD,NPY

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'pdm.lock', 'poetry.lock', 'poetry.toml', 'setup.cfg') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term --cov-report=html --timeout=300
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml --cov-report=term --timeout=600
      env:
        PYTHONPATH: ${{ github.workspace }}

    # Upload test coverage visualizes results to Codecov for analysis and PR reporting.
    # Requires CODECOV_TOKEN (set as a GitHub Actions secret) for authentication.
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v5
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 7

  type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-mypy-${{ hashFiles('pyproject.toml', 'pdm.lock', 'poetry.lock', 'poetry.toml', 'setup.cfg') }}
        restore-keys: |
          ${{ runner.os }}-pip-mypy-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports --strict --pretty --show-error-codes
    
    - name: Generate mypy report
      if: always()
      run: |
        mypy src --ignore-missing-imports --html-report mypy-report --no-incremental
    
    - name: Upload mypy report
      if: always()
      uses: actions/upload-artifact@v5
      with:
        name: mypy-report
        path: mypy-report/
        retention-days: 7

  test-summary:
    runs-on: ubuntu-latest
    needs: [lint, test, type-check]
    if: always()
    steps:
    - name: Check test results
      run: |
        echo "Lint: ${{ needs.lint.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Type Check: ${{ needs.type-check.result }}"
        
        if [ "${{ needs.lint.result }}" != "success" ] || \
           [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.type-check.result }}" != "success" ]; then
          echo "❌ Some checks failed"
          exit 1
        else
          echo "✅ All checks passed"
        fi
